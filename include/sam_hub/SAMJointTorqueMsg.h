// Generated by gencpp from file sam_hub/SAMJointTorqueMsg.msg
// DO NOT EDIT!


#ifndef SAM_HUB_MESSAGE_SAMJOINTTORQUEMSG_H
#define SAM_HUB_MESSAGE_SAMJOINTTORQUEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sam_hub
{
template <class ContainerAllocator>
struct SAMJointTorqueMsg_
{
  typedef SAMJointTorqueMsg_<ContainerAllocator> Type;

  SAMJointTorqueMsg_()
    : Torque()  {
      Torque.assign(0);
  }
  SAMJointTorqueMsg_(const ContainerAllocator& _alloc)
    : Torque()  {
  (void)_alloc;
      Torque.assign(0);
  }



   typedef boost::array<uint16_t, 25>  _Torque_type;
  _Torque_type Torque;




  typedef boost::shared_ptr< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SAMJointTorqueMsg_

typedef ::sam_hub::SAMJointTorqueMsg_<std::allocator<void> > SAMJointTorqueMsg;

typedef boost::shared_ptr< ::sam_hub::SAMJointTorqueMsg > SAMJointTorqueMsgPtr;
typedef boost::shared_ptr< ::sam_hub::SAMJointTorqueMsg const> SAMJointTorqueMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sam_hub

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sam_hub': ['/home/nhattan/catkin_ws/src/sam_hub/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59152a33f7637287e14ead9535288581";
  }

  static const char* value(const ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59152a33f7637287ULL;
  static const uint64_t static_value2 = 0xe14ead9535288581ULL;
};

template<class ContainerAllocator>
struct DataType< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sam_hub/SAMJointTorqueMsg";
  }

  static const char* value(const ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[25] Torque\n\
";
  }

  static const char* value(const ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SAMJointTorqueMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sam_hub::SAMJointTorqueMsg_<ContainerAllocator>& v)
  {
    s << indent << "Torque[]" << std::endl;
    for (size_t i = 0; i < v.Torque.size(); ++i)
    {
      s << indent << "  Torque[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.Torque[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAM_HUB_MESSAGE_SAMJOINTTORQUEMSG_H
