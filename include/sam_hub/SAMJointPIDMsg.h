// Generated by gencpp from file sam_hub/SAMJointPIDMsg.msg
// DO NOT EDIT!


#ifndef SAM_HUB_MESSAGE_SAMJOINTPIDMSG_H
#define SAM_HUB_MESSAGE_SAMJOINTPIDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sam_hub
{
template <class ContainerAllocator>
struct SAMJointPIDMsg_
{
  typedef SAMJointPIDMsg_<ContainerAllocator> Type;

  SAMJointPIDMsg_()
    : P()
    , D()
    , I()  {
      P.assign(0);

      D.assign(0);

      I.assign(0);
  }
  SAMJointPIDMsg_(const ContainerAllocator& _alloc)
    : P()
    , D()
    , I()  {
  (void)_alloc;
      P.assign(0);

      D.assign(0);

      I.assign(0);
  }



   typedef boost::array<uint8_t, 25>  _P_type;
  _P_type P;

   typedef boost::array<uint8_t, 25>  _D_type;
  _D_type D;

   typedef boost::array<uint8_t, 25>  _I_type;
  _I_type I;




  typedef boost::shared_ptr< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SAMJointPIDMsg_

typedef ::sam_hub::SAMJointPIDMsg_<std::allocator<void> > SAMJointPIDMsg;

typedef boost::shared_ptr< ::sam_hub::SAMJointPIDMsg > SAMJointPIDMsgPtr;
typedef boost::shared_ptr< ::sam_hub::SAMJointPIDMsg const> SAMJointPIDMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sam_hub

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sam_hub': ['/home/nhattan/catkin_ws/src/sam_hub/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "613b1d8a9b325554a068cef12a61210e";
  }

  static const char* value(const ::sam_hub::SAMJointPIDMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x613b1d8a9b325554ULL;
  static const uint64_t static_value2 = 0xa068cef12a61210eULL;
};

template<class ContainerAllocator>
struct DataType< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sam_hub/SAMJointPIDMsg";
  }

  static const char* value(const ::sam_hub::SAMJointPIDMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[25] P\n\
uint8[25] D\n\
uint8[25] I\n\
";
  }

  static const char* value(const ::sam_hub::SAMJointPIDMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.P);
      stream.next(m.D);
      stream.next(m.I);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SAMJointPIDMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sam_hub::SAMJointPIDMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sam_hub::SAMJointPIDMsg_<ContainerAllocator>& v)
  {
    s << indent << "P[]" << std::endl;
    for (size_t i = 0; i < v.P.size(); ++i)
    {
      s << indent << "  P[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.P[i]);
    }
    s << indent << "D[]" << std::endl;
    for (size_t i = 0; i < v.D.size(); ++i)
    {
      s << indent << "  D[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.D[i]);
    }
    s << indent << "I[]" << std::endl;
    for (size_t i = 0; i < v.I.size(); ++i)
    {
      s << indent << "  I[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.I[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAM_HUB_MESSAGE_SAMJOINTPIDMSG_H
