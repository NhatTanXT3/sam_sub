// Generated by gencpp from file sam_hub/SAMtfCalMsg.msg
// DO NOT EDIT!


#ifndef SAM_HUB_MESSAGE_SAMTFCALMSG_H
#define SAM_HUB_MESSAGE_SAMTFCALMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sam_hub
{
template <class ContainerAllocator>
struct SAMtfCalMsg_
{
  typedef SAMtfCalMsg_<ContainerAllocator> Type;

  SAMtfCalMsg_()
    : CN1(0.0)
    , CN2(0.0)
    , CN3(0.0)
    , CN4(0.0)
    , CN6(0.0)
    , CN7(0.0)  {
    }
  SAMtfCalMsg_(const ContainerAllocator& _alloc)
    : CN1(0.0)
    , CN2(0.0)
    , CN3(0.0)
    , CN4(0.0)
    , CN6(0.0)
    , CN7(0.0)  {
  (void)_alloc;
    }



   typedef double _CN1_type;
  _CN1_type CN1;

   typedef double _CN2_type;
  _CN2_type CN2;

   typedef double _CN3_type;
  _CN3_type CN3;

   typedef double _CN4_type;
  _CN4_type CN4;

   typedef double _CN6_type;
  _CN6_type CN6;

   typedef double _CN7_type;
  _CN7_type CN7;




  typedef boost::shared_ptr< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SAMtfCalMsg_

typedef ::sam_hub::SAMtfCalMsg_<std::allocator<void> > SAMtfCalMsg;

typedef boost::shared_ptr< ::sam_hub::SAMtfCalMsg > SAMtfCalMsgPtr;
typedef boost::shared_ptr< ::sam_hub::SAMtfCalMsg const> SAMtfCalMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sam_hub::SAMtfCalMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sam_hub

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sam_hub': ['/home/nhattan/catkin_ws/src/sam_hub/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d40f011b9adfc191eb213ceec1fc9040";
  }

  static const char* value(const ::sam_hub::SAMtfCalMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd40f011b9adfc191ULL;
  static const uint64_t static_value2 = 0xeb213ceec1fc9040ULL;
};

template<class ContainerAllocator>
struct DataType< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sam_hub/SAMtfCalMsg";
  }

  static const char* value(const ::sam_hub::SAMtfCalMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 CN1\n\
float64 CN2\n\
float64 CN3\n\
float64 CN4\n\
float64 CN6\n\
float64 CN7\n\
";
  }

  static const char* value(const ::sam_hub::SAMtfCalMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CN1);
      stream.next(m.CN2);
      stream.next(m.CN3);
      stream.next(m.CN4);
      stream.next(m.CN6);
      stream.next(m.CN7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SAMtfCalMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sam_hub::SAMtfCalMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sam_hub::SAMtfCalMsg_<ContainerAllocator>& v)
  {
    s << indent << "CN1: ";
    Printer<double>::stream(s, indent + "  ", v.CN1);
    s << indent << "CN2: ";
    Printer<double>::stream(s, indent + "  ", v.CN2);
    s << indent << "CN3: ";
    Printer<double>::stream(s, indent + "  ", v.CN3);
    s << indent << "CN4: ";
    Printer<double>::stream(s, indent + "  ", v.CN4);
    s << indent << "CN6: ";
    Printer<double>::stream(s, indent + "  ", v.CN6);
    s << indent << "CN7: ";
    Printer<double>::stream(s, indent + "  ", v.CN7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAM_HUB_MESSAGE_SAMTFCALMSG_H
